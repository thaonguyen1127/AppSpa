import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  FlatList,
  TouchableOpacity,
  TextInput,
  StatusBar,
  SafeAreaView,
  Platform,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import Swiper from 'react-native-swiper';
import { LinearGradient } from 'expo-linear-gradient';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import BookingHistoryScreen from './booked'; 
import FavoriteScreen from './favorite'; 
import ProfileScreen from './profile'; 
import { Colors } from '@/constants/Colors'; 

// Placeholder cho c√°c m√†n h√¨nh
const NotificationScreen = () => (
  <View style={styles.center}>
    <Text>Th√¥ng b√°o Screen</Text>
  </View>
);

// const FavoriteScreen = () => (
//   <View style={styles.center}>
//     <Text>Y√™u th√≠ch Screen</Text>
//   </View>
// );

// Component HomeScreen ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªïi
const HomeScreen = () => {
  const sliders = ['Slide 1', 'Slide 2', 'Slide 3'];
  const categories = ['Spa', 'Nail', 'Th·∫©m m·ªπ', 'T√≥c'];
  const topRatedSpas = [
    { id: '1', name: 'Spa A', rating: 4.9 },
    { id: '2', name: 'Spa B', rating: 4.7 },
  ];
  const nearbySpas = [
    { id: '1', name: 'Spa X', distance: '1.2km' },
    { id: '2', name: 'Spa Y', distance: '2.5km' },
  ];
  const promotions = [
    { id: '1', title: 'Gi·∫£m 20% Massage', discount: '20%' },
    { id: '2', title: 'Combo Spa 50%', discount: '50%' },
  ];

  const handleViewAllTopRated = () => {
    console.log('Xem t·∫•t c·∫£ spa ƒë∆∞·ª£c ƒë√°nh gi√° cao');
  };

  const handleViewAllNearby = () => {
    console.log('Xem t·∫•t c·∫£ spa g·∫ßn b·∫°n');
  };

  const handleViewAllPromotions = () => {
    console.log('Xem t·∫•t c·∫£ ∆∞u ƒë√£i');
  };

  return (
    // S·ª≠ d·ª•ng SafeAreaView ƒë·ªÉ ƒë·∫£m b·∫£o header c·ªë ƒë·ªãnh kh√¥ng b·ªã che
    <SafeAreaView style={styles.safeArea}>
      <StatusBar backgroundColor={Colors.pink} barStyle="light-content" />

      {/* ---- HEADER C·ªê ƒê·ªäNH ---- */}
      <LinearGradient
        // Gradient ch·ªâ √°p d·ª•ng cho header
        colors={[Colors.pink, `${Colors.pink}B3`]} // Gradient n√¥ng h∆°n
        style={styles.fixedHeaderGradient}
      >
        <View style={styles.headerContent}>
          <View style={styles.searchContainer}>
            <Icon name="search" size={20} color="#999" style={styles.searchIcon} />
            <TextInput
              style={styles.searchInput}
              placeholder="T√¨m ki·∫øm spa, nail..."
              placeholderTextColor="#999"
            />
          </View>
          {/* C√≥ th·ªÉ th√™m icon kh√°c ·ªü ƒë√¢y n·∫øu mu·ªën */}
        </View>
      </LinearGradient>
      {/* ---- K·∫æT TH√öC HEADER C·ªê ƒê·ªäNH ---- */}

      {/* ---- N·ªòI DUNG CU·ªòN (BAO G·ªíM SLIDER) ---- */}
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollViewContent}
      >
        {/* Khu v·ª±c Slide (N·∫±m trong ScrollView) */}
        <View style={styles.sliderContainer}>
          <Swiper
            style={styles.wrapper}
            showsButtons={false}
            autoplay
            loop // Cho ph√©p l·∫∑p v√¥ h·∫°n
            autoplayTimeout={4} // Th·ªùi gian chuy·ªÉn slide (gi√¢y)
            dotStyle={styles.dot} // Style cho d·∫•u ch·∫•m kh√¥ng active
            activeDotStyle={styles.activeDot} // Style cho d·∫•u ch·∫•m active
            paginationStyle={styles.pagination} // Style cho container c·ªßa d·∫•u ch·∫•m
          >
            {sliders.map((slide, index) => (
              <View key={index} style={styles.slide}>
                 {/* Thay Text b·∫±ng Image ho·∫∑c n·ªôi dung th·ª±c t·∫ø */}
                 <Text style={styles.slideText}>{slide}</Text>
              </View>
            ))}
          </Swiper>
        </View>

        {/* Danh m·ª•c */}
        <View style={styles.categoryContainer}>
          <Text style={styles.sectionTitle}>Danh m·ª•c</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {categories.map((category, index) => (
              <TouchableOpacity key={index} style={styles.categoryButton}>
                <Text style={styles.categoryText}>{category}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Spa ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Spa ƒë∆∞·ª£c ƒë√°nh gi√° cao</Text>
            <TouchableOpacity onPress={handleViewAllTopRated}>
              <Text style={styles.viewAllText}>Xem t·∫•t c·∫£</Text>
            </TouchableOpacity>
          </View>
          <FlatList
            data={topRatedSpas}
            horizontal
            showsHorizontalScrollIndicator={false}
            renderItem={({ item }) => (
              <TouchableOpacity style={styles.itemCard}>
                <View style={styles.itemImagePlaceholder} />
                <Text style={styles.itemText} numberOfLines={1}>{item.name}</Text>
                <Text style={styles.itemSubText}>‚≠ê {item.rating}</Text>
              </TouchableOpacity>
            )}
            keyExtractor={(item) => item.id}
            contentContainerStyle={{ paddingRight: 15 }}
          />
        </View>

        {/* Spa g·∫ßn nh·∫•t */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Spa g·∫ßn b·∫°n</Text>
            <TouchableOpacity onPress={handleViewAllNearby}>
              <Text style={styles.viewAllText}>Xem t·∫•t c·∫£</Text>
            </TouchableOpacity>
          </View>
          <FlatList
            data={nearbySpas}
            horizontal
            showsHorizontalScrollIndicator={false}
            renderItem={({ item }) => (
              <TouchableOpacity style={styles.itemCard}>
                <View style={styles.itemImagePlaceholder} />
                <Text style={styles.itemText} numberOfLines={1}>{item.name}</Text>
                <Text style={styles.itemSubText}>üìç {item.distance}</Text>
              </TouchableOpacity>
            )}
            keyExtractor={(item) => item.id}
            contentContainerStyle={{ paddingRight: 15 }}
          />
        </View>

        {/* ∆Øu ƒë√£i */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>∆Øu ƒë√£i</Text>
            <TouchableOpacity onPress={handleViewAllPromotions}>
              <Text style={styles.viewAllText}>Xem t·∫•t c·∫£</Text>
            </TouchableOpacity>
          </View>
          <FlatList
            data={promotions}
            horizontal
            showsHorizontalScrollIndicator={false}
            renderItem={({ item }) => (
              <TouchableOpacity style={styles.itemCardPromotion}>
                <View style={styles.promotionImagePlaceholder} />
                <Text style={styles.itemText} numberOfLines={2}>{item.title}</Text>
                <Text style={styles.discountText}>Gi·∫£m {item.discount}</Text>
              </TouchableOpacity>
            )}
            keyExtractor={(item) => item.id}
            contentContainerStyle={{ paddingRight: 15 }}
          />
        </View>
        {/* Kho·∫£ng tr·ªëng d∆∞·ªõi c√πng */}
         <View style={{ height: 20 }} />
      </ScrollView>
      {/* ---- K·∫æT TH√öC N·ªòI DUNG CU·ªòN ---- */}
    </SafeAreaView>
  );
};

// ----- C√°c component kh√°c v√† Tab Navigator gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc -----
const Tab = createBottomTabNavigator();

const UserScreen = () => {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;
          if (route.name === 'Home') iconName = focused ? 'home' : 'home-outline';
          else if (route.name === 'Booked') iconName = focused ? 'calendar' : 'calendar-outline';
          else if (route.name === 'Y√™u th√≠ch') iconName = focused ? 'heart' : 'heart-outline';
          else if (route.name === 'Th√¥ng b√°o') iconName = focused ? 'notifications' : 'notifications-outline';
          else if (route.name === 'T√¥i') iconName = focused ? 'person' : 'person-outline';
          else iconName = 'ellipse-outline';

          return <Icon name={iconName} size={size} color={color} />;
        },
        headerShown: false,
        tabBarActiveTintColor: Colors.pink,
        tabBarInactiveTintColor: '#888',
        tabBarLabelStyle: {
          fontWeight: '500',
          fontSize: 11,
          marginBottom: 5,
        },
        tabBarStyle: {
          backgroundColor: '#fff',
          borderTopWidth: 0.5,
          borderTopColor: '#eee',
          height: 65,
          paddingTop: 5,
          paddingBottom: Platform.OS === 'ios' ? 15 : 5,
        },
      })}
    >
      <Tab.Screen name="Home" component={HomeScreen} options={{ title: 'Trang ch·ªß' }} />
      <Tab.Screen name="Booked" component={BookingHistoryScreen} options={{ title: 'L·ªãch h·∫πn' }}/>
      <Tab.Screen name="Y√™u th√≠ch" component={FavoriteScreen} />
      <Tab.Screen name="Th√¥ng b√°o" component={NotificationScreen} />
      <Tab.Screen name="T√¥i" component={ProfileScreen} />
    </Tab.Navigator>
  );
};


const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: Colors.pink, // M√†u n·ªÅn cho khu v·ª±c SafeArea (ph√≠a tr√™n header)
  },
  // ---- Styles cho Header C·ªë ƒê·ªãnh ----
  fixedHeaderGradient: {
    paddingBottom: 10, // Padding d∆∞·ªõi c√πng c·ªßa gradient header
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  headerContent: {
    // Style cho n·ªôi dung b√™n trong gradient header
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingTop: Platform.OS === 'android' ? 5 : 10, 
  },
  searchContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#f0f0f0', // M√†u vi·ªÅn nh·∫°t h∆°n
    borderRadius: 10,
    paddingHorizontal: 15,
    backgroundColor: '#fff',
    height: 45,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    paddingVertical: 0,
    fontSize: 15,
    color: '#333',
  },

  // ---- Styles cho N·ªôi dung Cu·ªôn ----
  scrollView: {
    flex: 1, // Quan tr·ªçng: ƒê·ªÉ ScrollView chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
    backgroundColor: '#f8f9fa', // M√†u n·ªÅn cho ph·∫ßn n·ªôi dung cu·ªôn
  },
  scrollViewContent: {
    paddingBottom: 20, // Padding d∆∞·ªõi c√πng cho n·ªôi dung cu·ªôn
  },

  // ---- Styles cho Slider (n·∫±m trong ScrollView) ----
  sliderContainer: {
    height: 190, // Chi·ªÅu cao c·ªßa khu v·ª±c slider
    marginTop: 15, // Kho·∫£ng c√°ch t·ª´ header xu·ªëng slider
    marginBottom: 10, // Kho·∫£ng c√°ch t·ª´ slider xu·ªëng danh m·ª•c
    paddingHorizontal: 15, // Padding ngang ƒë·ªÉ slide kh√¥ng s√°t vi·ªÅn
  },
  wrapper: {}, // Style cho Swiper container
  slide: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff', // M√†u n·ªÅn slide
    borderRadius: 15,
    overflow: 'hidden',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    // Th√™m vi·ªÅn n·∫øu mu·ªën
    // borderWidth: 1,
    // borderColor: '#eee',
  },
  slideText: {
    color: Colors.pink,
    fontSize: 20,
    fontWeight: 'bold',
  },
  pagination: {
    bottom: 10, // V·ªã tr√≠ c·ªßa c√°c ch·∫•m pagination
  },
  dot: {
    backgroundColor: 'rgba(0, 0, 0, 0.2)', // M√†u ch·∫•m kh√¥ng active (t·ªëi h∆°n)
    width: 8,
    height: 8,
    borderRadius: 4,
    marginLeft: 4, // TƒÉng kho·∫£ng c√°ch gi·ªØa c√°c ch·∫•m
    marginRight: 4,
  },
  activeDot: {
    backgroundColor: Colors.pink, // M√†u ch·∫•m active (m√†u h·ªìng)
    width: 10, // Ch·∫•m active to h∆°n
    height: 10,
    borderRadius: 5,
    marginLeft: 4,
    marginRight: 4,
  },

  // ---- Styles cho c√°c Section c√≤n l·∫°i (Categories, Spas, Promotions) ----
  categoryContainer: {
    paddingHorizontal: 15,
    marginVertical: 10,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 12,
    color: '#333',
  },
  categoryButton: {
    backgroundColor: '#fff',
    paddingVertical: 8,
    paddingHorizontal: 18,
    borderRadius: 20,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#eee',
  },
  categoryText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#555',
  },
  section: {
    marginTop: 15,
    marginBottom: 10,
    paddingLeft: 15,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
    paddingRight: 15,
  },
  viewAllText: {
    fontSize: 13,
    color: Colors.pink,
    fontWeight: '600',
  },
  itemCard: {
    backgroundColor: '#fff',
    borderRadius: 10,
    marginRight: 12,
    width: 160,
    overflow: 'hidden',
    paddingBottom: 10,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.08,
    shadowRadius: 3,
  },
   itemCardPromotion: {
    backgroundColor: '#fff',
    borderRadius: 10,
    marginRight: 12,
    width: 250,
    overflow: 'hidden',
    paddingBottom: 10,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.08,
    shadowRadius: 3,
  },
  itemImagePlaceholder: {
      width: '100%',
      height: 100,
      backgroundColor: '#eee',
      marginBottom: 8,
  },
   promotionImagePlaceholder: {
      width: '100%',
      height: 120,
      backgroundColor: '#e0e0e0',
      marginBottom: 8,
  },
  itemText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#444',
    paddingHorizontal: 10,
    marginBottom: 4,
  },
  itemSubText: {
    fontSize: 12,
    color: '#777',
    paddingHorizontal: 10,
  },
   discountText: {
    fontSize: 13,
    fontWeight: 'bold',
    color: Colors.pink,
    paddingHorizontal: 10,
    marginTop: 5,
  },
  center: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
});

export default UserScreen;